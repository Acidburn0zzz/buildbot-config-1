# -*- python -*-
# ex: set syntax=python:

from buildbot.buildslave import BuildSlave
from buildbot.changes.gitpoller import GitPoller
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps import shell
from buildbot.steps.shell import ShellCommand
from buildbot.steps.slave import RemoveDirectory
from buildbot.steps.shell import Configure
from buildbot.steps.shell import Compile
from buildbot.process.properties import WithProperties
from buildbot.config import BuilderConfig
from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.status import words
from buildbot.status import results

import sys
sys.path.append('/storage/buildmaster/scripts')
import user_settings
from ShellCommandChangeList import ShellCommandChangeList

ENV = {
	'PATH': '/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin'
}

c = BuildmasterConfig = {
	'slavePortnum': 9989,
	'slaves': [],
	'change_source': [],
	'schedulers': [],
	'builders': [],
	'mergeRequests': True
}

OS='Linux'
proj="Void %s" % OS

for m in user_settings.machines:
	c['slaves'].append(
		BuildSlave(m['slave_name'], m['slave_pass'], properties={
			'os': OS, 'mach': m['mach'], 'project': proj
		}, keepalive_interval=600)
	)

	m['bulk_scheduler'] = SingleBranchScheduler(
		name="%s_bulk_scheduler" % m['mach'],
		change_filter=filter.ChangeFilter(
			branch=['master']
		),
		treeStableTimer=None,
		builderNames=["%s_builder" % m['mach']]
	)
	c['schedulers'].append(m['bulk_scheduler'])

	builddir  = WithProperties("%s", 'buildnumber')
	distdir   = 'xbps-packages'
	bulkdir   = 'xbps-bulk'
	masterdir = 'chroot'
	hostdir   = m['hostdir']
	crosstarget = m['crosstarget']

	xbps_packages_url = 'git://github.com/voidlinux/xbps-packages.git'
	bulk_url = 'git://github.com/davehome/xbps-bulk.git'

	BootstrapInstall = """
xbps-src -N -L -D {distdir} -m {masterdir} -H {hostdir} binary-bootstrap
""".format(distdir=distdir, masterdir=masterdir, hostdir=hostdir)

	MasterdirClean = """
rm -rf {masterdir}/tmp/* {masterdir}/builddir/* {masterdir}/destdir/*;
xbps-src -N -L -D {distdir} -m {masterdir} -H {hostdir} remove-autodeps
""".format(distdir=distdir, masterdir=masterdir, hostdir=hostdir)

	BootstrapUpdate = """
xbps-src -N -L -D {distdir} -m {masterdir} -H {hostdir} bootstrap-update
""".format(distdir=distdir, masterdir=masterdir, hostdir=hostdir)

	bulk_conf = ["../%s/configure" % bulkdir,
			'-a', crosstarget,
			'-d', "../%s"  % distdir,
			'-m', "../%s"  % masterdir,
			'-h', hostdir]
	get_pkgs  = ['make', 'print_pkgs']
	bulk_make = ['make']

	bulk_clean_step = Git(repourl=bulk_url, branch='master',
		mode='incremental', haltOnFailure=True,
		logEnviron=False, progress=True, workdir=bulkdir,
		alwaysUseLatest=True,
		description=['updating xbps-bulk from git'],
		descriptionDone=['xbps-bulk updated'])
	git_clean_step = Git(repourl=xbps_packages_url, branch='master',
		mode='incremental', haltOnFailure=True,
		logEnviron=False, progress=True, workdir=distdir,
		alwaysUseLatest=True,
		description=['updating xbps-packages from git'],
		descriptionDone=['xbps-packages updated'])
	bootinst_step = ShellCommand(command=BootstrapInstall, logEnviron=False,
		description=['Installing bootstrap binary packages'],
		descriptionDone=['xbps-src bootstrap installed'],
		workdir='.', haltOnFailure=True)
	masterdirclean_step = ShellCommand(command=MasterdirClean, logEnviron=False,
		description=['Cleaning masterdir and removing automatic dependencies'],
		descriptionDone=['xbps-src masterdir cleanup done'],
		workdir='.', haltOnFailure=True)
	bootup_step = ShellCommand(command=BootstrapUpdate, logEnviron=False,
		description=['Updating bootstrap binary packages'],
		descriptionDone=['xbps-src bootstrap updated'],
		workdir='.', haltOnFailure=True)
	conf_step = ShellCommandChangeList(command=bulk_conf, logEnviron=False,
		description=['finding pkgs'],
		descriptionDone=['found pkgs'],
		workdir=builddir, haltOnFailure=True)
	get_pkgs_step = shell.SetProperty(command=get_pkgs, property='pkgs',
		logEnviron=False, workdir=builddir, haltOnFailure=True)
	make_step = ShellCommand(command=bulk_make, logEnviron=False,
		description=[WithProperties("building %s", 'pkgs')],
		descriptionDone=[WithProperties("finished %s", 'pkgs')],
		workdir=builddir, haltOnFailure=True)
	rm_step = ShellCommand(command=['rm', '-rf', builddir], logEnviron=False,
		description=['cleaning working dir'],
		descriptionDone=['cleaned up working dir'],
		workdir='.', haltOnFailure=True)
	rm_chroot_builddir = ShellCommand(command=['rm', '-rf', "builddir/*"],
		logEnviron=False,
		description=['cleaning chroot pkg builddir'],
		descriptionDone=['cleaned up chroot pkg buildir'],
		workdir=masterdir, haltOnFailure=True)

	m['bulk_factory_steps'] = [
		bulk_clean_step, git_clean_step, bootinst_step, masterdirclean_step,
		bootup_step, conf_step, get_pkgs_step, make_step, rm_step, rm_chroot_builddir
	]
	m['bulk_factory'] = BuildFactory(m['bulk_factory_steps'])
	m['bulk_factory'].useProgress = False

	m["bulk_builder"] = BuilderConfig(
		name="%s_builder" % m['mach'],
		slavenames=[m['slave_name']],
		factory=m['bulk_factory'],
		env=ENV
	)
	c['builders'].append(m['bulk_builder'])

authz_cfg=authz.Authz(
	auth=auth.BasicAuth(user_settings.web_users),
	gracefulShutdown = 'auth', forceBuild = 'auth', forceAllBuilds = 'auth',
	pingBuilder = 'auth', stopBuild = 'auth', stopAllBuilds = 'auth',
	stopChange = 'auth', cancelPendingBuild = 'auth', showUsersPage = 'auth'
)

c['status'] = [
	html.WebStatus(
		http_port=8010, authz=authz_cfg, order_console_by_time=True,
		change_hook_dialects={ 'github' : True },
		change_hook_auth=["file:/storage/buildmaster/github-webhook.passwd"]
	),
	words.IRC(
		#allowForce=True,
		host='irc.freenode.net',
		nick='xbps_builder',
		channels=[{'channel': '#xbps'}],
		notify_events={ 'finished' : 1 },
		noticeOnChannel=True, useRevisions=True
	)
]

c['title'] = proj
c['titleURL'] = 'http://www.voidlinux.eu/'
c['buildbotURL'] = 'http://build.voidlinux.eu/'
c['db'] = { 'db_url' : 'sqlite:///state.sqlite' }
